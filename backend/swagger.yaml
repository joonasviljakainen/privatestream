swagger: "2.0"
info:
  title: "Privatestream API"
  description: "This is the API Documentation of Privatestream."
  version: "0.0.1"
  #termsOfService: """
  contact:
    email: "joonas.viljakainen@gmail.com"
  license:
    name: "License Undecided"
host: "privatestream.com"
basePath: "/api/v2"
tags:
  - name: "Users and access"
  - name: "Songs"
  - name: "Playlists"
schemes:
  - "https"
  - "http"
paths:
  /users:
    get:
      description: Retrieves a list of users.
      tags:
        - "Users and access"
      parameters:
        - in: header
          required: true
          name: authorization
          type: string
          description: Bearer token representing the user. The user must have role ADMIN to view users.
          x-example: Bearer asefojasefoijasef
      responses:
        # TODO response models
        200:
          description: ok
    post:
      description: Creates a new user.
      tags:
        - "Users and access"
      parameters:
        - in: body
          name: user
          required: true
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
                x-example: joonas.viljakainen@gmail.com
      responses:
        # TODO response models
        200:
          description: ok

  /users/{userId}:
    get:
      description: Retrieves the data for a single user. The user profile must belong to the authenticated user (i.e. the authorization token must represent the user whose info is being queried).
      tags:
        - "Users and access"
      parameters:
        - in: path
          name: userId
          type: string
          format: uuid
          description: Id of the user. Generated by the backend. Non-human-friendly.
          required: true
        - in: header
          required: true
          name: authorization
          type: string
          description: Bearer token representing the user. Represents an ADMIN or the owner of the user profile.
          x-example: Bearer asefojasefoijasef
      responses:
        200:
          description: ok

  /login:
    post:
      description: Generates an authentication token that represents the user.
      tags:
        - "Users and access"
      parameters:
        - in: body
          name: Login info
          schema:
            type: object
            properties:
              username:
                type: string
              password:
                type: string
      responses:
        200:
          description: ok

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
          - "placed"
          - "approved"
          - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
      - "name"
      - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
          - "available"
          - "pending"
          - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
